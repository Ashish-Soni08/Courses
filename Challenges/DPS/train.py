# -*- coding: utf-8 -*-
"""DPS_Challenge_Ashish_Soni.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vn2QTNhlAbRNtXMVvx-WCSZx7N-kdaxW

# Mission 1: Create an AI model

Here you will see the number of accidents for specific categories per month. Important are the first 5 columns:
- Category
- Accident-type (insgesamt means total for all subcategories)
- Year
- Month
- Value

## Import Packages and Data
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import datetime as dt

import matplotlib.pyplot as plt

import pickle

data = pd.read_csv("D:/Github/DPS_Challenge/dps_data.csv")

"""## Explore Data

**Summary of the data set:** The data set for monthly traffic accidents includes the topics:- 

- traffic accidents 
- escape accidents 
- alcohol accidents 
"""

data.head()

print("Number of rows and columns in the dataset are:",  data.shape)

data.info()

data = data.rename(columns={'MONATSZAHL' : 'category',
                     'AUSPRAEGUNG': 'accident_type',
                     'JAHR'       :'year',
                     'MONAT'      : 'month',
                     'WERT'       : 'value'})

columns = ['category', 'accident_type', 'year', 'month', 'value']

data = data[columns]

data.columns

data.describe(include=["number"])

data.describe(include="object")

# Check if missing values exist

missing_values_count = data.isnull().sum()
missing_values_count

# Check if duplicate rows exist

data.duplicated().sum()

print("Number of distinct categories:", data['category'].nunique())
print("The unique values are:", data['category'].unique())

print("Number of distinct accident_type:", data['accident_type'].nunique())
print("The unique values are:", data['accident_type'].unique())

print("Number of distinct years:", data['year'].nunique())
print("The unique values are:", data['year'].unique())

print("Number of distinct months:", data['month'].nunique())
print("The unique values are:", data['month'].unique())

# Check the index of rows with value of month = 'Summe'
idx = data.index[data['month'] == 'Summe'].tolist()
print(idx)

# Drop those rows

data = data.drop(idx)

print("Number of Rows and columns in Data after deleting wrong entries for month", data.shape)

# print("The unique values are:", data['month'].unique())  # 'Summe' does not exist now

dps_data = data.copy()

# Get the last two numbers for month, e.g. For the value 200007, get 07 as the new value for month column 
dps_data['month'] = dps_data['month'].str[-2:]

dps_data.head()

"""# Problem Statement

The dataset currently contains values until the end of 2020. Create an application that forecasts the values for:

- Category: 'Alkoholunf√§lle'
- Type: 'insgesamt
- Year: '2021'
- Month: '01'

We are predicting a numerical value. So its a Regression Task.




"""

mode_for_value_col= dps_data['value'].mode()
print(mode_for_value_col)

# Choosing the second value (other two values can be used too)
mode = mode_for_value_col[1]
print("mode chosen:", mode)

dps_data['value'].fillna(mode, inplace=True)

# Check: missing values were filled
dps_data.head()

final_df = dps_data.copy()
final_df.head()

final_df['month'] = final_df['month'].astype('int64')

final_df.info()

final_df.head()

# Selecting the Prediction Target
y = final_df.value

# Select Features

features = ['category', 'accident_type', 'month', 'year']

X = final_df[features]
X.head()

from sklearn.model_selection import train_test_split

X_train, val_X,  y_train, val_y = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)

# Get list of categorical variables
s = (X_train.dtypes == 'object')
object_cols = list(s[s].index)

print("Categorical variables:")
print(object_cols)

from sklearn.preprocessing import OneHotEncoder

OH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)
OH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[object_cols]))
OH_cols_valid = pd.DataFrame(OH_encoder.transform(val_X[object_cols]))

# One-hot encoding removed index; put it back
OH_cols_train.index = X_train.index
OH_cols_valid.index = val_X.index

# Remove categorical columns (will replace with one-hot encoding)
num_X_train = X_train.drop(object_cols, axis=1)
num_X_valid = val_X.drop(object_cols, axis=1)

# Add one-hot encoded columns to numerical features
OH_X_train = pd.concat([num_X_train, OH_cols_train], axis=1)
OH_val_X= pd.concat([num_X_valid, OH_cols_valid], axis=1)

OH_X_train.shape, OH_val_X.shape

from sklearn.tree import DecisionTreeRegressor

# Define model
dps_model = DecisionTreeRegressor(random_state=1)

# Fit model
dps_model.fit(OH_X_train,y_train)

from sklearn.metrics import mean_absolute_error

predicted_values = dps_model.predict(OH_val_X)
mean_absolute_error(val_y, predicted_values)

print("Making predictions:")
print(OH_val_X.head())
print("The predictions are")
print(dps_model.predict(OH_val_X.head()))

val_y.head()


"""# Saving the Model"""

pkl_filename = "D:/Github/DPS_Challenge/dps_model.pkl"

with open(pkl_filename, "wb") as file:
  pickle.dump(dps_model, file)


print(f'the model is saved to {pkl_filename}')